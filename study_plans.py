import json
from telegram import InlineKeyboardButton, InlineKeyboardMarkup

STATIC_GUIDE_LINK = "https://docs.google.com/document/d/1jbLpnreexrBDGiHLfmGho1RgdU1iaxDQJFO2NAMYpG0/edit?tab=t.0#heading=h.396gwqj7im4s"

user_states = {}

# –ó–∞–≥—Ä—É–∑–∫–∞ —É—á–µ–±–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
def load_study_plans():
    with open("study_plans.json", "r", encoding="utf-8") as file:
        return json.load(file)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é —Å —É—á–µ–±–Ω—ã–º–∏ –ø–ª–∞–Ω–∞–º–∏
async def show_study_plans(update, context):
    plans = load_study_plans()

    buttons = []

    for idx, plan in enumerate(plans):
        buttons.append([InlineKeyboardButton(f"–ü–ª–∞–Ω {idx + 1}", url=plan["link"])])

    buttons.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="add_study_plan")])
    buttons.append([InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel")])

    await update.message.reply_text(
        "–£—á–µ–±–Ω—ã–µ –ø–ª–∞–Ω—ã:",
        reply_markup=InlineKeyboardMarkup(buttons)
    )

async def add_study_plan_prompt(update, context):
    user_id = update.callback_query.from_user.id
    user_states[user_id] = "waiting_for_study_plan_link"

    buttons = [
        [InlineKeyboardButton("üìÑ –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω?", url=STATIC_GUIDE_LINK)],
        [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ]

    await update.callback_query.message.delete()
    await update.callback_query.message.chat.send_message(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Google Sheets:",
        reply_markup=InlineKeyboardMarkup(buttons)
    )

async def handle_text(update, context):
    user_id = update.message.from_user.id
    text = update.message.text.strip()

    if user_states.get(user_id) == "waiting_for_study_plan_link":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏
        if validate_link(text):
            save_study_plan(text)
            user_states.pop(user_id)
            buttons = [
                [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="cancel")]
            ]
            await update.message.reply_text(
                "–£—á–µ–±–Ω—ã–π –ø–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
                reply_markup=InlineKeyboardMarkup(buttons)
            )
        else:
            buttons = [
                [InlineKeyboardButton("üìÑ –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω?", url=STATIC_GUIDE_LINK)],
                [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
            ]
            await update.message.reply_text(
                "–£—á–µ–±–Ω—ã–π –ø–ª–∞–Ω —Å–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=InlineKeyboardMarkup(buttons)
            )

def validate_link(link):
    return link.startswith("https://docs.google.com/spreadsheets/")

def save_study_plan(link):
    with open("study_plans.json", "r", encoding="utf-8") as file:
        plans = json.load(file)

    plans.append({"link": link})

    with open("study_plans.json", "w", encoding="utf-8") as file:
        json.dump(plans, file, ensure_ascii=False, indent=2)