from datetime import datetime

from telegram import ReplyKeyboardMarkup, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler

from today import count_today_students, load_students
from study_plans import show_study_plans, add_study_plan_prompt, handle_text, user_states
from settings_section import show_settings, handle_document, user_states
from finance import show_finance_menu, ask_period, handle_text as finance_handle_text, user_states as finance_states, \
    show_debts, show_statistics

students = load_students()

async def show_schedule_buttons(update, context, period="today"):
    query = update.callback_query
    await query.answer()
    await query.message.delete()

    today = datetime.now()
    filtered_students = []

    for student in students:
        lesson_date = datetime.strptime(f"{student['date']}.{datetime.now().year}", "%d.%m.%Y")

        if period == "today" and lesson_date.date() == today.date():
            filtered_students.append(student)
        elif period == "3days" and 0 <= (lesson_date.date() - today.date()).days <= 3:
            filtered_students.append(student)
        elif period == "week" and 0 <= (lesson_date.date() - today.date()).days <= 7:
            filtered_students.append(student)

    if not filtered_students:
        await query.message.chat.send_message("–£—á–µ–Ω–∏–∫–∏ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    buttons = [
        [InlineKeyboardButton(student['name'] + " " + student['date'] + " " + student['time'], callback_data=f"student_{students.index(student)}")]
        for student in filtered_students
    ]
    buttons.append([InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel")])

    await context.bot.send_message(
        chat_id=query.message.chat.id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞:",
        reply_markup=InlineKeyboardMarkup(buttons)
    )

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    data = query.data
    print(f"–ù–ê–ñ–ê–¢–ê –ö–ù–û–ü–ö–ê: {data}")

    if data == "view_schedule":
        buttons = [
            [InlineKeyboardButton("üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data="period_today")],
            [InlineKeyboardButton("üìÜ –°–ª–µ–¥—É—é—â–∏–µ 3 –¥–Ω—è", callback_data="period_3days")],
            [InlineKeyboardButton("üóì –°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è", callback_data="period_week")],
            [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
        ]
        markup = InlineKeyboardMarkup(buttons)

        await query.message.delete()

        await query.message.chat.send_message("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:", reply_markup=markup)

    elif data == "share_schedule":
        share_link = "https://example.com/schedule"  # –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —Å—Å—ã–ª–∫–∞

        buttons = [
            [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
        ]

        markup = InlineKeyboardMarkup(buttons)
        await query.message.delete()
        await query.message.chat.send_message(
            f"–°–∫–æ–ø–∏—Ä—É–π —Å—Å—ã–ª–∫—É –∏ –≤—Å—Ç–∞–≤—å –≤ —Å–≤–æ—ë –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è:\n{share_link}",
            reply_markup=markup
        )

    elif data == "period_today":
        await show_schedule_buttons(update, context, period="today")

    elif data == "period_3days":
        await show_schedule_buttons(update, context, period="3days")

    elif data == "period_week":
        await show_schedule_buttons(update, context, period="week")


    elif data.startswith("student_"):
        index = int(data.split("_")[1])
        student = students[index]
        name = student['name']
        date = student['date']
        time = student['time']
        payment = student['payment']
        description = student['description'] if student['description'] else "–ù–µ—Ç"
        status = "‚úÖ –û–ø–ª–∞—á–µ–Ω–æ" if student['status_payment'] else "‚ùå –ù–µ –æ–ø–ª–∞—á–µ–Ω–æ"

        text = (
            f"<b>üë®‚Äçüéì {name}</b>\n"
            f"üìÖ –î–∞—Ç–∞: {date}\n"
            f"‚è∞ –í—Ä–µ–º—è: {time}\n"
            f"üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å: {payment} —Ä—É–±.\n"
            f"üìù –ó–∞–º–µ—Ç–∫–∞: {description}\n"
            f"üí≥ –°—Ç–∞—Ç—É—Å: {status}"
        )

        buttons = [
            [InlineKeyboardButton("üìÑ –¢–µ–æ—Ä–∏—è", url=student['materials_link'])],
            [InlineKeyboardButton("üìö –î–æ–º–∞—à–Ω—è—è —Ä–∞–±–æ—Ç–∞", url=student['homework_link'])],
            [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏", callback_data=f"reschedule_{index}")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_lesson_{index}")],
            [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"edit_{index}")],
            [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
        ]

        await query.answer()
        await query.message.delete()
        await context.bot.send_message(
            chat_id=query.message.chat.id,
            text=text,
            reply_markup=InlineKeyboardMarkup(buttons),
            parse_mode="HTML"
        )


    elif data == "cancel":
        await query.answer()
        if user_id in user_states:
            user_states.pop(user_id)
        # –£–¥–∞–ª—è–µ–º –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Ç–º–µ–Ω—ã
        await query.message.delete()

        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        chat_id = query.message.chat.id
        msg_ids = context.user_data.get('schedule_messages', [])
        for message_id in msg_ids:
            try:
                await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
            except:
                pass  # –°–æ–æ–±—â–µ–Ω–∏–µ –º–æ–≥–ª–æ –±—ã—Ç—å —É–∂–µ —É–¥–∞–ª–µ–Ω–æ

        # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
        context.user_data['schedule_messages'] = []

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await query.message.chat.send_message("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_markup)

    elif data.startswith("call_"):
        student_num = data.split("_")[1]
        await query.edit_message_text(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∑–≤–æ–Ω–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç—É #{student_num} –∑–∞ 15 –º–∏–Ω—É—Ç –¥–æ –∑–∞–Ω—è—Ç–∏—è.", reply_markup=None)

    elif data.startswith("reschedule_"):
        student_num = data.split("_")[1]
        await query.edit_message_text(f"–§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ #{student_num} –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ.", reply_markup=None)

    elif data == "no_materials":
        await query.edit_message_text("–î–ª—è —ç—Ç–æ–≥–æ —É—á–µ–Ω–∏–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã.", reply_markup=None)

    elif data == "add_study_plan":
        await add_study_plan_prompt(update, context)

    elif query.data == "finance_debts":
        await show_debts(update, context)

    elif query.data == "remind_all":
        await query.message.reply_text("–í—Å–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—è—Ö.")

    elif query.data.startswith("remind_"):
        name = query.data.replace("remind_", "")
        await query.message.reply_text(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è {name}.")

    elif data == "finance_stats":
        await ask_period(update, context, mode="stats")

    elif data == "finance_forecast":
        await ask_period(update, context, mode="forecast")

    elif data in ["period_month", "period_3months", "period_halfyear", "period_year", "period_alltime"]:
        mode = context.user_data.get("finance_mode")  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—Ä–∞–Ω–µ–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º (stats –∏–ª–∏ forecast)
        await show_statistics(update,"12.12.12", "12.12.12")
    elif data == "period_custom":
        await ask_period(update, context)

main_keyboard = [
    ['üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ'],
    ['üë®‚Äçüéì –£—á–µ–Ω–∏–∫–∏ –∏ –≥—Ä—É–ø–ø—ã'],
    ['üí∏ –§–∏–Ω–∞–Ω—Å—ã'],
    ['üìä –£—á–µ–±–Ω—ã–µ –ø–ª–∞–Ω—ã'],
    ['‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞']
]
main_markup = ReplyKeyboardMarkup(main_keyboard, resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    count = count_today_students()
    text = f"–ü—Ä–∏–≤–µ—Ç! –°–µ–≥–æ–¥–Ω—è —É—á–µ–Ω–∏–∫–æ–≤: {count}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    await update.message.reply_text(text, reply_markup=main_markup)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text

    if user_states.get(user_id) == "waiting_for_study_plan_link":
        await handle_text(update, context)
        return

    if finance_states.get(user_id):
        await finance_handle_text(update, context)
        return

    if text == 'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
        buttons = [
            [InlineKeyboardButton("üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å", callback_data="view_schedule")],
            [InlineKeyboardButton("üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è", callback_data="share_schedule")]
        ]
        markup = InlineKeyboardMarkup(buttons)
        await update.message.reply_text("–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?", reply_markup=markup)
    elif text == "üìä –£—á–µ–±–Ω—ã–µ –ø–ª–∞–Ω—ã":
        await show_study_plans(update, context)
    elif text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞":
        await show_settings(update, context)
    elif text == "üí∏ –§–∏–Ω–∞–Ω—Å—ã":
        await show_finance_menu(update, context)
    elif text in ['üë®‚Äçüéì –£—á–µ–Ω–∏–∫–∏ –∏ –≥—Ä—É–ø–ø—ã']:
        await update.message.reply_text(f"–í—ã –Ω–∞–∂–∞–ª–∏: {text}\n(–ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞)", reply_markup=main_markup)
    else:
        await update.message.reply_text("–Ø –Ω–µ –ø–æ–Ω—è–ª, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_markup)

if __name__ == '__main__':
    app = ApplicationBuilder().token('7511367039:AAEHApD7LOeuCq2-_Cb8jBXuZeYlIKBIe1I').build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.add_handler(MessageHandler(filters.Document.ALL, handle_document))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()
