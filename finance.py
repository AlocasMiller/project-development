import json

from telegram import InlineKeyboardButton, InlineKeyboardMarkup

user_states = {}

async def show_finance_menu(update, context):
    buttons = [
        [InlineKeyboardButton("üí∞ –ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏", callback_data="finance_debts")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="finance_stats")],
        [InlineKeyboardButton("üìà –ü—Ä–æ–≥–Ω–æ–∑", callback_data="finance_forecast")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="cancel")]
    ]

    await update.message.reply_text(
        "–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞:",
        reply_markup=InlineKeyboardMarkup(buttons)
    )

def load_debts():
    with open("debts.json", "r", encoding="utf-8") as file:
        return json.load(file)

async def show_debts(update, context):
    debts_data = load_debts()
    total_debt = debts_data["total_debt"]

    # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—â–µ–π —Å—É–º–º–æ–π –∏ –∫–Ω–æ–ø–∫–æ–π
    text = f"<b>–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–µ–π:</b> {total_debt} ‚ÇΩ"
    buttons = [[InlineKeyboardButton("üîî –ù–∞–ø–æ–º–Ω–∏—Ç—å –≤—Å–µ–º", callback_data="remind_all")]]
    markup = InlineKeyboardMarkup(buttons)

    await update.callback_query.message.edit_text(
        text=text,
        reply_markup=markup,
        parse_mode="HTML"
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –±–ª–æ–∫–∞ –Ω–∞ –∫–∞–∂–¥–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
    for student in debts_data["students"]:
        student_text = f"<b>{student['name']}, {student['days_overdue']} –¥–Ω.</b>\n"
        for payment in student["payments"]:
            student_text += f"{payment['date']}: {payment['amount']} ‚ÇΩ\n"

        student_buttons = [[InlineKeyboardButton(f"üîî –ù–∞–ø–æ–º–Ω–∏—Ç—å: {student['name']}", callback_data=f"remind_{student['name']}")]]
        student_markup = InlineKeyboardMarkup(student_buttons)

        await update.effective_chat.send_message(
            text=student_text,
            reply_markup=student_markup,
            parse_mode="HTML"
        )

# –í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞
async def ask_period(update, context, mode):
    user_id = update.callback_query.from_user.id
    user_states[user_id] = {"state": "choose_period", "mode": mode}

    buttons = [
        [InlineKeyboardButton("–ú–µ—Å—è—Ü", callback_data="period_month")],
        [InlineKeyboardButton("–¢—Ä–∏ –º–µ—Å—è—Ü–∞", callback_data="period_3months")],
        [InlineKeyboardButton("–ü–æ–ª–≥–æ–¥–∞", callback_data="period_6months")],
        [InlineKeyboardButton("–ì–æ–¥", callback_data="period_year")],
        [InlineKeyboardButton("–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è", callback_data="period_all")],
        [InlineKeyboardButton("–°–≤–æ–π –ø–µ—Ä–∏–æ–¥", callback_data="period_custom")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="cancel")]
    ]

    await update.callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
        reply_markup=InlineKeyboardMarkup(buttons)
    )


# –í–≤–æ–¥ –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã
async def ask_start_date(update, context):
    user_id = update.callback_query.from_user.id
    user_states[user_id]["state"] = "waiting_start_date"

    await update.callback_query.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY:",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="cancel")]])
    )


# –í–≤–æ–¥ –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã
async def ask_end_date(update, context):
    user_id = update.message.from_user.id
    user_states[user_id]["state"] = "waiting_end_date"

    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY:",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="cancel")]])
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞—Ç
async def handle_text(update, context):
    user_id = update.message.from_user.id
    state_data = user_states.get(user_id)

    if not state_data:
        return

    if state_data["state"] == "waiting_start_date":
        state_data["start_date"] = update.message.text.strip()
        await ask_end_date(update, context)

    elif state_data["state"] == "waiting_end_date":
        state_data["end_date"] = update.message.text.strip()
        mode = state_data["mode"]
        start = state_data["start_date"]
        end = state_data["end_date"]

        if mode == "stats":
            await show_statistics(update, context, start, end)
        else:
            await show_forecast(update, context, start, end)

        user_states.pop(user_id, None)


# –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async def show_statistics(update, start, end):
    await update.callback_query.message.reply_text(
        f"<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥:</b> {start} - {end}\n"
        f"–î–æ—Ö–æ–¥: 12345 ‚ÇΩ\n"
        f"–ü—Ä–æ–≤–µ–¥–µ–Ω–æ –∑–∞–Ω—è—Ç–∏–π: 50\n"
        f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ —á–∞—Å–æ–≤: 100\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–µ–Ω–∏–∫–æ–≤: 30\n"
        f"–û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è: 5\n"
        f"–∫–ª—é—á: –∑–Ω–∞—á–µ–Ω–∏–µ",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="cancel")]])
    )


# –ü–æ–∫–∞–∑ –ø—Ä–æ–≥–Ω–æ–∑–∞
async def show_forecast(update, start, end):
    await update.callback_query.message.reply_text(
        f"<b>–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –ø–µ—Ä–∏–æ–¥:</b> {start} - {end}\n"
        f"–î–æ—Ö–æ–¥: 15000 ‚ÇΩ\n"
        f"–ü—Ä–æ–≤–µ–¥–µ–Ω–æ –∑–∞–Ω—è—Ç–∏–π: 60\n"
        f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ —á–∞—Å–æ–≤: 120\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–µ–Ω–∏–∫–æ–≤: 35\n"
        f"–û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è: 3\n"
        f"–∫–ª—é—á: –∑–Ω–∞—á–µ–Ω–∏–µ",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="cancel")]])
    )
